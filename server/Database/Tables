--The order of tables must change to able create entire database from this file
-- without entering each tavle/view one by one

-- CourseInstance, group and lab assignment shoudl be primary key here
CREATE Table AssignmentFeedback (
	groupId INTEGER NOT NULL,
	CourseId serial,
	Assignment INTEGER,
	TestFeedback JSON,
	TeacherFeedback TEXT,
	TestPass BOOLEAN NOT NULL DEFAULT FALSE, 
	TeacherGrade BOOLEAN NOT NULL DEFAULT FALSE,
	PRIMARY KEY(GroupId,CourseId, Assignment),
	CONSTRAINT fk_assignment
		FOREIGN KEY (CourseId, Assignment) REFERENCES Assignments (CourseId, Assignment),
		FOREIGN Key (groupId) REFERENCES Groups(groupId)
);


CREATE Table AssignmentFiles (
		GroupId INTEGER  NOT NULL, 
		CourseId serial,
		Assignment INTEGER,
		FileName TEXT NOT NULL, --Could add foregin key to FileName-table
		FileData BYTEA NOT NULL, 
		FileType TEXT NOT NULL,
		PRIMARY KEY(GroupId,CourseId, Assignment, FileName),
		CONSTRAINT fk_assignment
		FOREIGN KEY (CourseId, Assignment) REFERENCES Assignments (CourseId, Assignment),
		FOREIGN Key (groupId) REFERENCES Groups(groupId)
	);


--USE courseId as foring key in assignment files and lab tests,what should be used as primarykey?
CREATE Table Courses (
	CourseId serial PRIMARY KEY,
	CourseName TEXT NOT NULL,
	Course Char(6) NOT NULL,
	TeachingPeriod INTEGER,
	CourseYear INTEGER,
	CHECK (teachingPeriod BETWEEN 1 AND 5),
	UNIQUE ( Course, teachingPeriod, CourseYear)
);

CREATE Table Assignments(
	CourseId serial,
	Assignment INTEGER check (Assignment > 0),
	Description TEXT Not NULL,
	endDate Date NOT NULL,
	PRIMARY KEY (courseId, Assignment),
	CONSTRAINT fk_course
	FOREIGN KEY (CourseId) REFERENCES Courses(CourseId)
);

-- Used for tests to find the correct filenames
CREATE Table FileNames (
	nameId SERIAl PRIMARY KEY,
	CourseId SERIAL,
	Assignment INTEGER,
	FileName TEXT NOT NULL,
	CONSTRAINT fk_assignment
	FOREIGN KEY (CourseId, Assignment) REFERENCES Assignments (CourseId, Assignment)
);

--for unittests
CREATE Table TestFiles (
	CourseId serial ,
	Assignment INTEGER , 
	Filename TEXT NOT NULL,
	FileData BYTEA NOT NULL,
	PRIMARY KEY(CourseId, Assignment, FileName),
	CONSTRAINT fk_assignment
	FOREIGN KEY (CourseId, Assignment) REFERENCES Assignments(CourseId, Assignment)
)

CREATE TABLE UserData (
	userId SERIAL,
	cid TEXT UNIQUE,
	email TEXT NOT NULL,
	passphrase BYTEA NOT NULL,
	globalRole TEXT NOT NULL CHECK (globalRole IN ('Student', 'Teacher', 'Admin' )),
	fullName TEXT NOT NULL,
	PRIMARY KEY (userId),
	CHECK (email ~* '^[a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$')
	);

CREATE TABLE Groups (
	groupId serial,
	groupNumber INTEGER,
	course INTEGER,
	PRIMARY KEY (groupId),
	CONSTRAINT courseGroups UNIQUE (groupNumber,course),
	FOREIGN KEY (course) REFERENCES Courses(courseId)
);

CREATE TABLE UserInGroup (
	userId INTEGER,
	groupId INTEGER,
	PRIMARY KEY (userId, groupId),
	FOREIGN KEY (groupId) REFERENCES Groups(groupId) ON DELETE CASCADE,
	FOREIGN KEY (userId) REFERENCES UserData(userId) ON DELETE CASCADE
);


CREATE TABLE UserInCourse (
	userId INTEGER,
	courseId INTEGER,
	userRole TEXT NOT NULL CHECK (userRole IN ('Admin', 'Teacher', 'Student')),
	PRIMARY KEY (userId, courseId),
	FOREIGN KEY (courseId) REFERENCES Courses(courseId) ON DELETE CASCADE,
	FOREIGN KEY (userId) REFERENCES UserData(userId) ON DELETE CASCADE
);

--View for user and course data can be called for course inf from specific user:
--To Call do: select * from user_course_info where userId = 'id int';

CREATE OR REPLACE VIEW UserCourseInfo AS
SELECT uic.userId, uic.userRole, c.courseId, c.courseName, c.Course, c.TeachingPeriod, c.CourseYear
FROM UserInCourse uic
JOIN Courses c ON uic.courseId = c.CourseId;


--This view shows user and its courses with corresponding groups. Useful to get group info if user and course id is known

CREATE OR REPLACE VIEW UserGroupCourseInfo AS
SELECT uig.userId, uig.groupId, g.groupNumber, g.course as courseId, c.Course, c.courseyear, c.teachingperiod
FROM UserInGroup uig
JOIN Groups g ON uig.groupId = g.groupId
JOIN Courses c ON g.course = c.CourseId;


--This view shows all user and group information, eg. used to get all groupmember cids from your group 
CREATE OR REPLACE VIEW UserGroupInfo AS
SELECT UserData.userId, UserData.cid, UserInGroup.groupId, Groups.groupNumber
FROM UserData
JOIN UserInGroup ON UserData.userId = UserInGroup.userId
JOIN Groups ON UserInGroup.groupId = Groups.groupId;